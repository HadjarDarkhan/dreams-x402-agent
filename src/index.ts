// src/index.ts
import { createAgentApp } from "@lucid-dreams/agent-kit";
import { payWinner } from "./payout";
import { playGame } from "./games";

// –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –ø–æ –≥—Ä–æ—à–∞—Ö / –º–µ—Ä–µ–∂—ñ
const NETWORK = process.env.NETWORK || process.env.X402_NETWORK || "base";
const FACILITATOR_URL =
  process.env.FACILITATOR_URL || "https://facilitator.daydreams.systems";

// –æ—Ü–µ–π –∞–¥—Ä–µ—Å –º–∞—î –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≥—Ä–æ—à—ñ –í–Ü–î –≥—Ä–∞–≤—Ü—ñ–≤
const PAY_TO = process.env.ADDRESS || process.env.PAY_TO_ADDRESS || "";

if (!PAY_TO) {
  console.warn(
    "‚ö†Ô∏è ADDRESS / PAY_TO_ADDRESS –Ω–µ –∑–∞–¥–∞–Ω–∏–π ‚Äì x402 –ø–æ–∫–∞–∂–µ free, –±–æ –Ω–µ–º–∞ –∫–æ–º—É –ø–ª–∞—Ç–∏—Ç–∏."
  );
}

// –∫–∞—Ä—Ç–∞ —ñ–≥–æ—Ä, —Ç—É—Ç —É—Å–µ –≤ –æ–¥–Ω–æ–º—É –º—ñ—Å—Ü—ñ
const GAMES: Record<
  string,
  {
    price: string; // —Å–∞–º–µ —Ç–∞–∫, —Ä—è–¥–æ–∫, —Ç–∏–ø—É "$0.01" ‚Äì —Ç–∞–∫ —Ö–æ—á–µ x402 :contentReference[oaicite:1]{index=1}
    payout: number; // —Å–∫—ñ–ª—å–∫–∏ USDC –≤—ñ–¥–¥–∞–º–æ –ø—Ä–∏ win
    winChance: number;
    engine: string; // —è–∫ –≥—Ä–∞ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ
    description: string;
  }
> = {
  "coin.micro": {
    price: "$0.01",
    payout: 0.02,
    winChance: 0.38,
    engine: "coin_flip",
    description: "Flip a coin for x2"
  },
  "lucky.low": {
    price: "$0.10",
    payout: 0.2,
    winChance: 0.45,
    engine: "lucky_number",
    description: "Guess 1-10"
  },
  "dice.mid": {
    price: "$1.00",
    payout: 1.7,
    winChance: 0.4,
    engine: "dice_roll",
    description: "Roll 1-6"
  },
  "dice.high": {
    price: "$10.00",
    payout: 14,
    winChance: 0.35,
    engine: "dice_roll",
    description: "High stakes dice"
  },
};

const { app, addEntrypoint } = createAgentApp(
  {
    name: "Ponzi MiniGames x402 Agent",
    version: "1.3.0",
    description: "Paid mini-games (coin, lucky, dice) on Base via x402",
  },
  {
    // –º–∏ —Å–∞–º—ñ –±—É–¥–µ–º–æ –∫–∞–∑–∞—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∞ —Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –∫–æ—à—Ç—É—î
    useConfigPayments: false,
  }
);

// —É—Ç–∏–ª—ñ—Ç–∞: —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ 402 —è–∫ –≤ –¥–æ–∫–∞—Ö
function make402(key: string) {
  const cfg = GAMES[key];

  return new Response(
    JSON.stringify({
      message: "Payment Required",
      // —Å–∞–º–µ –æ—Ç–∞–∫–∏–π –º–∞—Å–∏–≤ –ø—Ä–∏–π–º–∞—î –±—ñ–ª—å—à—ñ—Å—Ç—å —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ–π x402: —Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ, —â–æ –º–∏ –ø—Ä–∏–π–º–∞—î–º–æ
      // :contentReference[oaicite:2]{index=2}
      accept: [
        {
          price: cfg.price,
          network: NETWORK,
          payTo: PAY_TO,
          facilitatorUrl: FACILITATOR_URL,
          description: cfg.description,
          meta: {
            entrypoint: key,
          },
        },
      ],
    }),
    {
      status: 402,
      headers: {
        "content-type": "application/json",
      },
    }
  );
}

// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ ‚Äú—á–∏ –∑–∞–ø–ª–∞—á–µ–Ω–æ‚Äù
function isPaid(ctx: any): boolean {
  // —É —Ä—ñ–∑–Ω–∏—Ö —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π –Ω–∞–∑–≤–∏ —Ç—Ä–æ—Ö–∏ –ø–ª–∞–≤–∞—é—Ç—å, —Ç–æ–º—É –¥–∏–≤–∏–º–æ—Å—å –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
  const h = ctx?.req?.headers || ctx?.headers || {};

  const paidHeader =
    h["x-402-payment-status"] ||
    h["x402-payment-status"] ||
    h["x-402-status"] ||
    h["x402-status"];

  if (typeof paidHeader === "string" && paidHeader.toLowerCase() === "paid") {
    return true;
  }

  // —ñ–Ω–∫–æ–ª–∏ –∫–ª—ñ—î–Ω—Ç–∏ –ø—Ä–æ–∫–∏–¥–∞—é—Ç—å proof —É —Ç—ñ–ª—ñ
  const body = ctx?.body || {};
  if (body?.x402?.status === "paid" || body?.__x402_paid === true) {
    return true;
  }

  return false;
}

function registerGame(key: keyof typeof GAMES) {
  const cfg = GAMES[key];

  addEntrypoint({
    key,
    // üëá —Ü–µ –º–µ—Ç–∞–¥–∞–Ω—ñ, —â–æ–± ui –Ω–µ –ø–∏—Å–∞–≤ FREE
    payments: {
      // —Ñ–æ—Ä–º–∞—Ç —è–∫ —É fastapi-x402 ‚Üí "$0.01" :contentReference[oaicite:3]{index=3}
      price: cfg.price,
      network: NETWORK,
      facilitatorUrl: FACILITATOR_URL,
      payTo: PAY_TO,
    },
    handler: async (ctx: any) => {
      // 1. —è–∫—â–æ –Ω–µ –∑–∞–ø–ª–∞—á–µ–Ω–æ ‚Üí 402
      if (!isPaid(ctx)) {
        return make402(key);
      }

      // 2. –≥—Ä–∞—î–º–æ
      const body = ctx?.body || {};
      const gameResult = playGame({
        game: cfg.engine,
        choice: body.choice,
        guess: body.guess,
      });

      // 3. —Ä–∞–Ω–¥–æ–º –ø–æ —à–∞–Ω—Å–∞–º (—Ü–µ —Å–∞–º–µ –∫–∞–∑–∏–Ω–æ üòâ)
      const roll = Math.random();
      const win = roll < cfg.winChance;

      // 4. —è–∫—â–æ –≤–∏–≥—Ä–∞–≤ —ñ –≤—ñ–Ω –¥–∞–≤ –∞–¥—Ä–µ—Å—É ‚Üí –ø–ª–∞—Ç–∏–º–æ
      const playerAddress =
        body.playerAddress || body.address || body.wallet || null;

      let payout: any = { paid: false, reason: "not_triggered" };
      if (win && playerAddress) {
        payout = await payWinner(playerAddress, cfg.payout);
      }

      // 5. –≤—ñ–¥–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return {
        ok: true,
        entrypoint: key,
        paid: true,
        price: cfg.price,
        game: cfg.engine,
        gameResult,
        win,
        winChance: cfg.winChance,
        payoutPlanned: cfg.payout,
        payout,
        network: NETWORK,
        messageUk: win
          ? `‚úÖ –í–∏ –∑–∞–ø–ª–∞—Ç–∏–ª–∏ ${cfg.price} —ñ –≤–∏–≥—Ä–∞–ª–∏! –í–∏–ø–ª–∞—Ç–∞: ${
              payout.paid ? "–Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ ‚úÖ" : `–Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ ‚ùå (${payout.reason})`
            }`
          : `‚ùå –í–∏ –∑–∞–ø–ª–∞—Ç–∏–ª–∏ ${cfg.price}, –∞–ª–µ —Ü—å–æ–≥–æ —Ä–∞–∑—É –Ω–µ –ø–æ—â–∞—Å—Ç–∏–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.`,
      };
    },
  });
}

// —Ä–µ—î—Å—Ç—Ä—É—î–º–æ –≤—Å—ñ 4
registerGame("coin.micro");
registerGame("lucky.low");
registerGame("dice.mid");
registerGame("dice.high");

export default app;
