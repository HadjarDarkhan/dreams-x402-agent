// src/index.ts
import { createAgentApp } from "@lucid-dreams/agent-kit";
import { payWinner } from "./payout";
import { ethers } from "ethers";

const { app, addEntrypoint } = createAgentApp(
  {
    name: "Ponzi MiniGames x402 Agent",
    version: "1.2.0",
    description: "Paid mini-games (coin, lucky, dice) on Base via x402",
  },
  {
    // –º–∏ —Å–∞–º—ñ –∑–∞–¥–∞—î–º–æ payments –≤ –∫–æ–∂–Ω–æ–º—É entrypoint
    useConfigPayments: false,
  }
);

// –Ω–∞—à–∞ —Ç–∞–±–ª–∏—Ü—è —ñ–≥–æ—Ä
const GAMES: Record<
  string,
  { price: number; payout: number; winChance: number; game: string }
> = {
  "coin.micro": { price: 0.01, payout: 0.02, winChance: 0.38, game: "coin_flip" },
  "lucky.low": { price: 0.1, payout: 0.2, winChance: 0.45, game: "lucky_number" },
  "dice.mid": { price: 1, payout: 1.7, winChance: 0.4, game: "dice_roll" },
  "dice.high": { price: 10, payout: 14, winChance: 0.35, game: "dice_roll" },
};

const NETWORK =
  process.env.NETWORK || process.env.X402_NETWORK || "base";
const PAY_TO =
  process.env.ADDRESS || process.env.PAY_TO_ADDRESS || "";
const FACILITATOR =
  process.env.FACILITATOR_URL ||
  "https://facilitator.daydreams.systems"; // —è–∫ —É —Ç–µ–±–µ –≤–∂–µ —Å—Ç–æ—ó—Ç—å

function addGameEntrypoint(key: keyof typeof GAMES) {
  const cfg = GAMES[key];

  addEntrypoint({
    key,
    // üëá —Ü–µ –≥–æ–ª–æ–≤–Ω–µ: —Ç—É—Ç –º–∏ —Ä–æ–±–∏–º–æ –π–æ–≥–æ –ø–ª–∞—Ç–Ω–∏–º ‚Üí x402scan –Ω–µ –±—É–¥–µ –∫–∞–∑–∞—Ç–∏ ‚ÄúNo 402 Response‚Äù
    payments: {
      price: `$${cfg.price}`,
      network: NETWORK,
      facilitatorUrl: FACILITATOR,
      payTo: PAY_TO,
    },
    handler: async (ctx) => {
      // 1. –±–µ—Ä–µ–º–æ –∞–¥—Ä–µ—Å—É –≥—Ä–∞–≤—Ü—è (—Ñ—Ä–æ–Ω—Ç –º–∞—î —ó—ó –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏)
      const body = ctx.body || {};
      const playerAddress: string | undefined =
        body.playerAddress || body.address || body.wallet;

      // 2. —Ä–∞—Ö—É—î–º–æ win / lose
      const rnd = Math.random();
      const win = rnd < cfg.winChance;

      // 3. —è–∫—â–æ –≤–∏–≥—Ä–∞–≤ —ñ —î –∞–¥—Ä–µ—Å–∞ ‚Üí –ø—Ä–æ–±—É—î–º–æ –∑–∞–ø–ª–∞—Ç–∏—Ç–∏
      let payoutResult: any = { paid: false, reason: "not_triggered" };
      if (win && playerAddress) {
        payoutResult = await payWinner(playerAddress, cfg.payout);
      }

      // 4. –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≥—Ä–∞–≤—Ü—é / –∞–≥–µ–Ω—Ç–∞
      return {
        ok: true,
        entrypoint: key,
        spent: `$${cfg.price}`,
        game: cfg.game,
        win,
        chance: cfg.winChance,
        payoutPlanned: `$${cfg.payout}`,
        payout: payoutResult,
        messageUk: win
          ? `‚úÖ –í–∏ –∑–∞–ø–ª–∞—Ç–∏–ª–∏ $${cfg.price} —ñ –í–ò–ì–†–ê–õ–ò –≤ ${cfg.game}. –í–∏–ø–ª–∞—Ç–∞: ${
              payoutResult.paid
                ? "–Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ ‚úÖ"
                : `–Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ ‚ùå (${payoutResult.reason})`
            }`
          : `‚ùå –í–∏ –∑–∞–ø–ª–∞—Ç–∏–ª–∏ $${cfg.price}, –∞–ª–µ —Ü—å–æ–≥–æ —Ä–∞–∑—É ${cfg.game} –ø—Ä–æ–≥—Ä–∞–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.`,
      };
    },
  });
}

addGameEntrypoint("coin.micro");
addGameEntrypoint("lucky.low");
addGameEntrypoint("dice.mid");
addGameEntrypoint("dice.high");

export default app;
